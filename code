Java Tutorial Code

//first code

public class Main {

    public static void main(String[] args) {

        System.out.println("Hello World");
        System.out.println("Welcome to Java");

        //This is a comment
    }
}

//variables

public class Main {

    public static void main(String[] args) {
        int x = 123;
        double y = 3.14;
        boolean z = true;
        String name = "BroCode";

        System.out.println(x);
        System.out.println("My number is : " + x);
        System.out.println(y);
        System.out.println(z);
        System.out.println(name);
        System.out.println("Hello " + name);
    }
}

//swap two variables

public class Main {

    public static void main(String[] args) {
        String x = "Water";
        String y = "Kool-Aid";
        String temp;

        temp = x;
        x = y;
        y = temp;

        System.out.println("x: " + x);
        System.out.println("y: " + y);
    }
}

//user input

import java.util.Scanner;

public class Main {

    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);

        System.out.println("What is your name?");
        String name = scanner.nextLine();

        System.out.println("How old are you?");
        int age = scanner.nextInt();
        scanner.nextLine();
        //.nextInt() & .nextDouble() leaves \n in memory so if we use .nextInt() next then it is not utilized but if we use .nextLine then it will take \n as input as \n is considered as string

        System.out.println("What is your favorite food?");
        String food = scanner.nextLine();

        System.out.println("Hello " + name);
        System.out.println("You are " + age + " years old");
        System.out.println("You Like " + food);

        scanner.close();//good practice to free system resources
    }
}

//expressions

public class Main {

    public static void main(String[] args) {

        // expression = operands & operators
        // operands = values, variables, numbers, quantity
        // operators = + - * / %

        int friends = 10;

        //friends = friends + 1;
        friends++;

        System.out.println(friends);
    }
}

//GUI intro

import javax.swing.JOptionPane;

public class Main {

    public static void main(String[] args) {

        String name = JOptionPane.showInputDialog("Enter your name");
        JOptionPane.showMessageDialog(null, "Hello " + name);

        int age = Integer.parseInt(JOptionPane.showInputDialog("Enter your age"));
        JOptionPane.showMessageDialog(null, "You are " + age + " years old");

        double height = Double.parseDouble(JOptionPane.showInputDialog("Enter your height"));
        JOptionPane.showMessageDialog(null, "You are " + height + " cm tall");
    }
}

//math class

import java.util.Scanner;

public class Main {

    public static void main(String[] args) {

        double a = 3.14;
        double b = -10.33;

        double c = Math.max(a, b);
        double d = Math.abs(b);
        double e = Math.round(a);
        double f = Math.ceil(a);
        double g = Math.floor(a);
        System.out.println("Max num is: " + c);
        System.out.println("Abs value is: " + d);
        System.out.println("Round num is: " + e);
        System.out.println("Ceil num is: " + f);
        System.out.println("floor num is: " + g);

        double x;
        double y;
        double z;

        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter side x: ");
        x = scanner.nextDouble();
        System.out.println("Enter side y: ");
        y = scanner.nextDouble();

        z = Math.sqrt((x * x) + (y * y));

        System.out.println("The hypotenuse is: " + z);

        scanner.close();
    }
}

//random numbers

import java.util.Random;

public class Main {

    public static void main(String[] args) {

        Random random = new Random();

        int x = random.nextInt();
        int y = random.nextInt(6) + 1;//Dice roll
        double z = random.nextDouble();//value in 0-1
        boolean a = random.nextBoolean();

        System.out.println(x);
        System.out.println(y);
        System.out.println(z);
        System.out.println(a);

    }
}

//if statements

public class Main {

    public static void main(String[] args) {

        //if statement = performs a block of code if it's condition evaluates to be true

        int age = 13;

        if (age >= 75) {
            System.out.println("Ok Boomer!");//if(age == 75) not if(age = 75)
        }
        else if (age >= 18) {
            System.out.println("You are an adult!");
        }
        else if (age >= 13) {
            System.out.println("You are a teenager!");
        }
        else {
            System.out.println("You are not an adult!");
        }
    }
}

//switches

public class Main {

    public static void main(String[] args) {

        // switch = statement that allows a variable to be tested for equality against a list of values

        String day = "Friday"; // case sensitive

        switch (day) {
            case "Monday":
                System.out.println("It is Monday!");
                break;

            case "Tuesday":
                System.out.println("It is Tuesday!");
                break;

            case "Wednesday":
                System.out.println("It is Wednesday!");
                break;

            case "Thursday":
                System.out.println("It is Thursday!");
                break;

            case "Friday":
                System.out.println("It is Friday!");
                break;

            case "Saturday":
                System.out.println("It is Saturday!");
                break;

            default:
                System.out.println("That is not a day!");
        }
    }
}

//logical operators

import java.util.Scanner;

public class Main {

    public static void main(String[] args) {

        //logical operators = used to connect two or more expressions
        //               && = And : both conditions must be true
        //               || = Or : either condition must be true
        //                ! = Not : reverses boolean value of the condition

        int temp = 25;

        if (temp > 30) {
            System.out.println("It is hot outside!");
        }
        else if (temp >= 20 && temp <= 30) {
            System.out.println("It is warm outside!");
        }
        else {
            System.out.println("It is cold outside!");
        }

        //another question
        //when we take response as input we declare new objects everytime so if we use == then we are comparing objects which are different
        //but if we define String response = "Q" then == will work fine as it will use string literals

        Scanner scanner = new Scanner(System.in);

        System.out.println("You are playing a game! Press q or Q to quit");
        String response = scanner.next();

        if (response.equals("q") || response.equals("Q")) {
            System.out.println("You quit the game");
        }
        else {
            System.out.println("You are still playing the game");
        }
    }
}

//while loop

import java.util.Scanner;

public class Main {

    public static void main(String[] args) {

        //while loop executes a block of code as long as it's condition remains true

        Scanner scanner = new Scanner(System.in);
        String name = "";

        while(name.isBlank()) {
            System.out.println("Enter your name : ");
            name = scanner.nextLine();
        }

        System.out.println("Hello " + name);
    }
}

public class Main {

    public static void main(String[] args) {

        int i = 1;

        while(i<=5) {
            System.out.println("Count : "+i);
            i++;
        }

        System.out.println("Done");
    }
}

//for loop

public class Main {

    public static void main(String[] args) {

        // for loop executes a block of code a limited amount of time

        for (int i = 10; i >= 0; i--) {
            System.out.println(i);
            //i-- for one i-=2 for two
            //can write i-- in loop below System.out.println(i); rather than above
        }
        System.out.println("Happy New Year!");
    }
}

//nested loops

import java.util.Scanner;

public class Main {

    public static void main(String[] args) {

        //nested loops means loops inside loops

        Scanner scanner = new Scanner(System.in);
        int rows;
        int columns;
        String symbol = "";

        System.out.println("Enter # of rows : ");
        rows = scanner.nextInt();
        System.out.println("Enter # of columns : ");
        columns = scanner.nextInt();
        System.out.println("Enter symbol to use : ");
        symbol = scanner.next();

        for(int i=1; i<=rows; i++) {
            System.out.println();
            for(int j=1; j<=columns; j++) {
                System.out.print(symbol);
            }
        }
    }
}

//arrays

public class Main {

    public static void main(String[] args) {

        // array used to store multiple values in single variable

        String[] cars = {"Camaro", "Corvette", "Tesla"};
        System.out.println(cars[1]);
    }
}

public class Main {

    public static void main(String[] args) {

        // array used to store multiple values in single variable

        String[] cars = new String[3];

        cars[0] = "Camaro";
        cars[1] = "Corvette";
        cars[2] = "Tesla";

        for (int i=0; i<cars.length; i++) {
            System.out.println(cars[i]);
        }
    }
}

//2D arrays

public class Main {

    public static void main(String[] args) {

        //2D arrays are arrays of arrays

        String[][] cars = {
                {"Camaro", "Corvette", "Silverdo"},
                {"Mustang", "Ranger", "F-150"},
                {"Ferrari", "Lambo", "Tesla"}
        };

        for(int i=0; i<cars.length; i++) {
            System.out.println();
            for(int j=0; j<cars[i].length; j++) {
                System.out.print(cars[i][j] + " ");
            }
        }
    }
}

//string methods

public class Main {

    public static void main(String[] args) {

        String name = "Aniruddha";

        boolean result1 = name.equalsIgnoreCase("aniruddha");
        int result2 = name.length();
        char result3 = name.charAt(1);
        int result4 = name.indexOf("a");
        boolean result5 = name.isEmpty();
        String result6 = name.toUpperCase();
        String result7 = name.toLowerCase();
        String result8 = name.trim();
        String result9 = name.replace("d", "z");

        System.out.println(result1);
        System.out.println(result2);
        System.out.println(result3);
        System.out.println(result4);
        System.out.println(result5);
        System.out.println(result6);
        System.out.println(result7);
        System.out.println(result8);
        System.out.println(result9);
    }
}

//wrapper classes

public class Main {

    public static void main(String[] args) {

        //wrapper class provides a way to use primitive data types as reference data types
        //reference data types contains useful methods
        //autoboxing = the automatic conversion that Java compiler makes between the primitive data types and their corresponding object wrapper class
        //unboxing = the reverse of autoboxing, automatic conversion of wrapper class to primitive

        Boolean a = true;
        Character b = '@';
        Integer c = 123;
        Double d = 3.14;
        String e = "Aniruddha";

        if(a==true) {
            System.out.println("This is true");
        }
    }
}

//array list

import java.util.ArrayList;

public class Main {

    public static void main(String[] args) {

        //ArrayList is a resizable array
        //Elements can be added or removed after compilation phase
        //Store reference data types

        ArrayList<String> food = new ArrayList<String>();

        food.add("pizza");
        food.add("hamburger");
        food.add("hotdog");

        food.set(0, "vadapav");
        food.remove(2);
        food.clear();

        for(int i=0; i<food.size(); i++) {
            System.out.println(food.get(i));
        }
    }
}

//2D array list

import java.util.*;

public class Main {

    public static void main(String[] args) {

        //2D arraylist is a dynamic list of lists
        //You can change the size of these lists during runtime

        ArrayList<ArrayList<String>> groceryList = new ArrayList<ArrayList<String>>();

        ArrayList<String> bakeryList = new ArrayList<>();
        bakeryList.add("pasta");
        bakeryList.add("garlic bread");
        bakeryList.add("donuts");

        ArrayList<String> produceList = new ArrayList<>();
        produceList.add("tomatoes");
        produceList.add("zucchini");
        produceList.add("peppers");

        ArrayList<String> drinksList = new ArrayList<>();
        drinksList.add("soda");
        drinksList.add("coffee");

        groceryList.add(bakeryList);
        groceryList.add(produceList);
        groceryList.add(drinksList);

        System.out.println(groceryList);
        System.out.println(groceryList.get(0));
        System.out.println(groceryList.get(0).get(0));
        System.out.println(groceryList.get(2).get(1));
    }
}

//for each loop

public class Main {

    public static void main(String[] args) {

        String[] animals = {"cat", "dog", "rat", "bird"};

        for(String i : animals) {
            System.out.println(i);
        }
    }
}

//for each loop

import java.util.ArrayList;

public class Main {

    public static void main(String[] args) {

        ArrayList<String> animals = new ArrayList<String>();

        animals.add("cat");
        animals.add("dog");
        animals.add("rat");
        animals.add("bird");

        for(String i : animals) {
            System.out.println(i);
        }
    }
}

//Array vs ArrayList
//Array is built in feature while ArrayList is class in java.util package
//Arrays are fixed in size and cannot grow or shrink while ArrayLists are dynamic and can automatically resize using methods like add() or remove()
//Arrays can store primitive data types and objects while ArrayLists can store only objects (using autoboxing)
//Arrays are faster while ArraysLists are slightly overhead


//methods

public class Main {

    public static void main(String[] args) {

        //method is a block of code that is executed whenever it is called upon
        hello();
    }

    static void hello() {
        System.out.println("Hello World");
    }
}

public class Main {

    public static void main(String[] args) {

        hello(2);
    }

    static void hello(int x) {
        System.out.println(x*x);
    }
}

public class Main {

    public static void main(String[] args) {

        String name = "Aniruddha";
        hello(name);
    }

    static void hello(String x) {
        System.out.println("Hello " + x);
    }
}

public class Main {

    public static void main(String[] args) {

        String name = "Aniruddha";
        int age = 30;
        hello(name,age);
    }

    static void hello(String x, int y) {
        System.out.println("Hello " + x);
        System.out.println("You are " + y +" years old");
    }
}

public class Main {

    public static void main(String[] args) {

        int x = 3;
        int y = 4;

        //int z = add(x,y);
        //System.out.println(z);

        System.out.println(add(x,y));
    }

    static int add(int x, int y) {

        int z = x + y;
        return z;
        //return x + y;
    }
}

//overloaded methods

public class Main {

    public static void main() {

        //overloaded methods = methods that share the same name but have different parameters
        //method name + parameters = method signatures

        int x = add(1, 2, 3);
        System.out.println(x);
        double y = add(1.0, 2.0, 3.0, 4.0);
        System.out.println(y);
    }

    static int add(int a, int b) {
        System.out.println("This is overloaded method #1");
        return a + b;
    }
    static  int add(int a, int b, int c) {
        System.out.println("This is overloaded method #2");
        return a + b + c;
    }
    static int add(int a, int b, int c, int d) {
        System.out.println("This is overloaded method #3");
        return a + b + c + d;
    }
    static double add(double a, double b) {
        System.out.println("This is overloaded method #4");
        return a + b;
    }
    static  double add(double a, double b, double c) {
        System.out.println("This is overloaded method #5");
        return a + b + c;
    }
    static double add(double a, double b, double c, double d) {
        System.out.println("This is overloaded method #6");
        return a + b + c + d;
    }
}

//printf

public class Main {

    public static void main(String[] args) {

        //printf() = an optional method to control, format and display text to the console window
        //two arguments = format string + (object/variable/value)
        //% [flags] [precision] [width] [conversion-character]

        System.out.printf("This is format string %d", 123);
        System.out.println();
        //can use \n or %n after %d for immediate next line
        //%n is best practice for cross-platform

        boolean myBoolean = true;
        char myChar = '@';
        String myString = "Aniruddha";
        int myInt = 50;
        double myDouble = 1000;

        //[conversion-character]
        //System.out.printf("%b", myBoolean); original code without line break
        System.out.printf("%b\n", myBoolean);
        System.out.printf("%c\n", myChar);
        System.out.printf("%s\n", myString);
        System.out.printf("%d\n", myInt);
        System.out.printf("%f\n", myDouble);

        //[width]
        //minimum number of characters to be written as output
        System.out.printf("Hello %20s\n", myString);
        System.out.printf("Hello %-15s\n", myString);//space after text

        //[precision]
        //sets number of digits of precision when outputting floating-point values
        System.out.printf("You have this much money %.2f\n", myDouble);

        //[flags]
        //adds an effect to output based on the flag added to format specifier
        // - : left-justify
        // + : output a (+) or (-) sign for a numeric value
        // 0 : numeric values are zero-padded
        // , : comma grouping separator if numbers> 1000

        System.out.printf("You have this much money %-20f\n", myDouble);
        System.out.printf("You have this much money %+f\n", myDouble);
        System.out.printf("You have this much money %020f\n", myDouble);
        System.out.printf("You have this much money %,f\n", myDouble);
    }
}

//final keyword

public class Main {

    public static void main(String[] args) {

        //anything that is declared as final cannot be changed or updated

        double x = 1.234;
        x = 3;

        System.out.println(x);//here x is changed to 3.0

        final double pi = 3.14159;
        //pi = 4 this cannot be done as it will through error

        System.out.println(pi);
    }
}

//objects (OOP)

public class Main {

    public static void main(String[] args) {

        //object is an instance of a class that may contain attributes and methods

        Car myCar1 = new Car();
        Car myCar2 = new Car();

        System.out.println(myCar1.make);
        System.out.println(myCar1.model);
        System.out.println();
        System.out.println(myCar2.make);
        System.out.println(myCar2.model);
        System.out.println();

        myCar1.drive();
        myCar1.brake();
    }
}

class Car {

    String make = "Chevrolet";
    String model = "Corvette";
    int year = 2020;
    String color = "Yellow";
    double price = 50000.00;

    void drive() {
        System.out.println("You drive the car");
    }
    void brake() {
        System.out.println("You step on the brakes");
    }
}

//constructors

public class Main {

    public static void main(String[] args) {

        //constructor is a special method that is called when an object is created

        Human human1 = new Human("Rick", 40, 80);
        Human human2 = new Human("Morty", 35, 75);

        System.out.println(human1.name);
        System.out.println(human2.age);

        human2.eat();
        human1.drink();
    }
}

class Human {

    String name;
    int age;
    double weight;

    Human(String name, int age, double weight) {

        this.name = name;
        this.age = age;
        this.weight = weight;
    }

    void eat() {
        System.out.println(this.name + " is eating");
    }
    void drink() {
        System.out.println(this.name + " is drinking");
    }
}

//variable scope

import java.util.Random;

public class Main {

    public static void main(String[] args) {

        //local variables are declared inside the method and are visible only to that method
        //global variables are declared outside the method, but within the class and are visible to all parts of the class

        DiceRoller diceroller = new DiceRoller();
    }
}

class DiceRoller {

    Random random;
    int num;

    DiceRoller() {
        random = new Random();
        roll();
    }

    void roll() {
        num = random.nextInt(6)+1;
        System.out.println(num);
    }
}

//overloaded constructors

public class Main {

    public static void main(String[] args) {

        //overloaded constructors are multiple constructors within a class with same name, but have different parameters
        //name + parameters = signature

        Pizza pizza1 = new Pizza("thick crust", "tomato", "mozzarella", "peperoni");
        System.out.println("Here are the ingredients of your pizza1 : ");
        System.out.println(pizza1.bread);
        System.out.println(pizza1.sauce);
        System.out.println(pizza1.cheese);
        System.out.println(pizza1.topping);

        Pizza pizza2 = new Pizza("thin crust", "white", "cheddar");
        System.out.println("Here are the ingredients of your pizza2 : ");
        System.out.println(pizza2.bread);
        System.out.println(pizza2.sauce);
        System.out.println(pizza2.cheese);

        Pizza pizza3 = new Pizza("Stuffed Crust", "Barbecue");
        System.out.println("Here are the ingredients of your pizza3 : ");
        System.out.println(pizza3.bread);
        System.out.println(pizza3.sauce);

        Pizza pizza4 = new Pizza("Multigrain Crust");
        System.out.println("Here are the ingredients of your pizza4 : ");
        System.out.println(pizza4.bread);

        Pizza pizza5 = new Pizza();
        System.out.println("Here are the ingredients of your pizza5 : ");
        System.out.println(pizza5.bread);
    }
}

class Pizza {

    String bread;
    String sauce;
    String cheese;
    String topping;

    Pizza() {

    }
    Pizza(String bread) {

        this.bread = bread;
    }
    Pizza(String bread, String sauce) {

        this.bread = bread;
        this.sauce = sauce;
    }
    Pizza(String bread, String sauce, String cheese) {

        this.bread = bread;
        this.sauce = sauce;
        this.cheese = cheese;
    }
    Pizza(String bread, String sauce, String cheese, String topping) {

        this.bread = bread;
        this.sauce = sauce;
        this.cheese = cheese;
        this.topping = topping;
    }
}

//toString method

public class Main {

    public static void main() {

        //toString is a special method that all objects inherit, that returns a string that "textually represents" as object
        //can be used both implicitly and explicitly

        Car car = new Car();
        System.out.println(car.toString());//explicitly
        System.out.println(car);//implicitly
    }
}

class Car {

    String make = "Ford";
    String model = "Mustang";
    String color = "Red";
    int year = 2021;

    public String toString() {

        String myString = make +"\n"+ model +"\n"+ color +"\n"+ year;
        return myString;
    }
}

//array of objects

public class Main {

    public static void main(String[] args) {

        //int[] numbers = new int[3];
        //char[] characters = new char[4];
        //String[] string = new String[5];

        //Food[] refrigerator = new Food[3];

        Food food1 = new Food("pizza");
        Food food2 = new Food("hamburger");
        Food food3 = new Food("hotdog");

        Food[] refrigerator = {food1, food2, food3};

        //refrigerator[0] = food1;
        //refrigerator[1] = food2;
        //refrigerator[2] = food3;

        System.out.println(refrigerator[0].name);
        System.out.println(refrigerator[1].name);
        System.out.println(refrigerator[2].name);
    }
}

class Food {

    String name;

    Food(String name) {

        this.name = name;
    }
}

//object passing

public class Main {

    public static void main(String[] args) {

        Garage garage = new Garage();

        Car car1 = new Car("BMW");
        Car car2 = new Car("Tesla");

        garage.park(car1);
        garage.park(car2);
    }
}

class Garage {

    void park(Car car) {
        System.out.println("The "+car.name+" is parked in the garage");
    }
}

class Car {

    String name;

    Car(String name) {
        this.name = name;
    }
}

//static keyword

public class Main {

    public static void main(String[] args) {

        //static = modifier. A single copy of a variable/method is created and shared.
        //the class owns the static member

        Friend friend1 = new Friend("SpongeBob");
        Friend friend2 = new Friend("Patrick");
        Friend friend3 = new Friend("Harry");
        Friend friend4 = new Friend("Sandy");

        Friend.displayFriends();
    }
}

class Friend {

    String name;
    static int numberOfFriends;

    Friend(String name) {
        this.name = name;
        numberOfFriends++;
    }

    static void displayFriends() {
        System.out.println("You have "+numberOfFriends+" friends");
    }
}

//inheritance

public class Main {

    public static void main(String[] args) {

        //inheritance is the process where one class acquires attributes and methods of another

        Car car = new Car();

        car.go();

        Bicycle bike = new Bicycle();

        bike.stop();

        System.out.println(car.speed);
        System.out.println(bike.speed);

        System.out.println(car.doors);
        System.out.println(bike.pedals);
    }
}

class Vehicle {

    double speed;

    void go() {
        System.out.println("This vehicle is moving");
    }
    void stop() {
        System.out.println("This vehicle is stopped");
    }
}

class Car extends Vehicle {

    int wheels = 4;
    int doors = 4;
}

class Bicycle extends Vehicle {

    int wheels = 2;
    int pedals = 2;
}

//method overriding

public class Main {

    public static void main(String[] args) {

        //method overriding is declaring method in child class which is already present in parent class
        //done so that a child class can give its own implementation

        Animal animal = new Animal();
        Dog dog = new Dog();

        animal.speak();
        dog.speak();

    }
}

class Animal {

    void speak() {
        System.out.println("The animal speaks");
    }
}

class Dog extends Animal {

    void speak() {
        System.out.println("The dog goes *bark*");
    }
}
//super keyword

public class Main {

    public static void main() {

        //super keyword refers to the superclass (parent) of an object, very similar to "this" keyword

        Hero hero1 = new Hero("Batman", 40, "$$$");
        Hero hero2 = new Hero("Superman", 50, "everything");

        System.out.println(hero1.name);
        System.out.println(hero1.age);
        System.out.println(hero1.power);

        System.out.println(hero2.toString());
    }
}

class Person {

    String name;
    int age;

    Person(String name, int age) {

        this.name = name;
        this.age = age;
    }

    public String toString() {
        return this.name +"\n"+ this.age +"\n";
    }
}

class Hero extends Person {

    String power;

    Hero(String name, int age, String power) {

        super(name, age);
        this.power = power;
    }

    public String toString() {
        return super.toString() + this.power;
    }
}

//abstraction

public class Main {

    public static void main(String[] args) {

        //abstract = abstract class cannot be instantiated, but they can have subclass
        //abstract methods are declared without an implementation

        //Vehicle vehicle = new Vehicle(); we cannot do this
        Car car = new Car();

        car.go();
    }
}

abstract class Vehicle {

    abstract void go();
}

class Car extends Vehicle {

    void go() {
        System.out.println("The driver is driving the car");
    }
}

//access modifiers

package package1;
import package2.*;

public class A {

    //no access modifier or default modifier can be accessed by other class but in same package
    //public modifier can be accessed by everyone
    //protected modifier can be accessed within class and subclass whose parent is in another package
    //private modifier is only accessible in same class not even other class from same package

    protected String protectedMessage = "This is protected";

    public static void main(String[] args) {

        C c = new C();

        System.out.println(c.publicMessage);
    }
}

package package1;
import package2.*;

public class B {

    private String privateMessage = "This is private";
}

package package2;
import package1.*;

public class C {

    String defaultMessage = "This is default";
    protected String protectedMessage = "This is protected";
    public String publicMessage = "This is public";

}

package package2;
import package1.*;

public class Asub extends A{

    public static void main(String[] args) {

        C c = new C();
        Asub asub = new Asub();

        System.out.println(c.defaultMessage);
        System.out.println(asub.protectedMessage);
        System.out.println(c.protectedMessage);
    }
}

//encapsulation

public class Main {

    public static void main(String[] args) {

        //encapsulation means hiding the attributes of a class or making them private
        //can be accessed through methods (getters or setters)
        //you should make attributes private if you don't have any reason to make them public or protected

        Car car = new Car("Chevrolet", "Corvette", 2021);

        System.out.println(car.getMake());
        System.out.println(car.getModel());
        System.out.println(car.getYear());

        car.setYear(2022);
        System.out.println(car.getYear());
    }
}

class Car {

    private String make;
    private String model;
    private int year;

    Car(String make, String model, int year) {

        this.setMake(make);
        this.setModel(model);
        this.setYear(year);
    }

    public String getMake() {
        return make;
    }
    public String getModel() {
        return model;
    }
    public int getYear() {
        return year;
    }

    public void setMake(String make) {
        this.make = make;
    }
    public void setModel(String model) {
        this.model = model;
    }
    public void setYear(int year) {
        this.year = year;
    }
}

//copy objects

public class Main {

    public static void main(String[] args) {

        Car car1 = new Car("Chevrolet", "Camaro", 2021);
        Car car2 = new Car("Ford", "Mustang", 2022);

        Car car3 = new Car(car2);

        System.out.println(car1);
        System.out.println(car2);
        System.out.println();
        System.out.println(car1.getMake());
        System.out.println(car1.getModel());
        System.out.println(car1.getYear());
        System.out.println();
        System.out.println(car2.getMake());
        System.out.println(car2.getModel());
        System.out.println(car2.getYear());
        System.out.println();

        car2.copy(car1);

        System.out.println(car2.getMake());
        System.out.println(car2.getModel());
        System.out.println(car2.getYear());
        System.out.println();
        System.out.println(car3.getMake());
        System.out.println(car3.getModel());
        System.out.println(car3.getYear());
        System.out.println();
    }
}

class Car {

    private String make;
    private String model;
    private int year;

    Car(String make, String model, int year) {

        this.setMake(make);
        this.setModel(model);
        this.setYear(year);
    }

    Car(Car x) {
        this.copy(x);
    }

    public String getMake() {
        return make;
    }
    public String getModel() {
        return model;
    }
    public int getYear() {
        return year;
    }

    public void setMake(String make) {
        this.make = make;
    }
    public void setModel(String model) {
        this.model = model;
    }
    public void setYear(int year) {
        this.year = year;
    }

    public void copy(Car x) {
        this.setMake(x.getMake());
        this.setModel(x.getModel());
        this.setYear(x.getYear());
    }
}

//interface

public class Main {

    public static void main(String[] args) {

        //interface is a template that can be applied to a class
        //similar to inheritance but specifies what a class has/must do
        //classes can apply more than one interface whereas inheritance is limited to one super class

        Rabbit rabbit = new Rabbit();
        rabbit.flee();

        Hawk hawk = new Hawk();
        hawk.hunt();

        Fish fish = new Fish();
        fish.flee();
        fish.hunt();
    }
}

class Rabbit implements Prey {

    public void flee() {
        System.out.println("The rabbit is fleeing");
    }
}

class Hawk implements Predator {

    public void hunt() {
        System.out.println("The hawk is hunting");
    }
}

class Fish implements Prey, Predator {

    public void flee() {
        System.out.println("This fish is fleeing from a larger fish");
    }
    public void hunt() {
        System.out.println("This fish is hunting smaller fish");
    }
}

interface Prey {

    void flee();
}

interface Predator {

    void hunt();
}

//polymorphism

public class Main {

    public static void main(String[] args) {

        //polymorphism means many form
        //The ability of an object to identify as more than one type

        Car car = new Car();
        Bicycle bicycle = new Bicycle();
        Boat boat = new Boat();

        Vehicle[] racers = {car, bicycle, boat};

        //car.go();
        //bicycle.go();
        //boat.go();

        for(Vehicle x : racers) {
            x.go();
        }
    }
}

class Vehicle {

    public void go() {
        
    }
}

class Car extends Vehicle{

    public void go() {
        System.out.println("The car begins to move");
    }
}

class Bicycle extends Vehicle {

    public void go() {
        System.out.println("The bicycle begins to move");
    }
}

class Boat extends Vehicle {

    public void go() {
        System.out.println("The boat begins to move");
    }
}

//dynamic polymorphism

import java.util.Scanner;

public class Main {

    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);
        Animal animal;

        System.out.println("What animal do you want?");
        System.out.println("Dog = 1 or Cat = 2 :");
        int choice = scanner.nextInt();

        if(choice==1) {
            animal = new Dog();
            animal.speak();
        }
        else if(choice==2) {
            animal = new Cat();
            animal.speak();
        }
        else {
            animal = new Animal();
            System.out.println("That choice was invalid");
            animal.speak();
        }
    }
}

class Animal {

    public void speak() {
        System.out.println("Animal goes brr");
    }
}

class Dog extends Animal {

    public void speak() {
        System.out.println("Dog goes bark");
    }
}

class Cat extends Animal {

    public void speak() {
        System.out.println("Cat goes meow");
    }
}

//exception handling

import java.util.InputMismatchException;
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {

        //exception is an event that occurs during the execution of a program that disrupts the normal flow of instructions

        Scanner scanner = new Scanner(System.in);

        try {
            System.out.println("Enter a whole number to divide :");
            int x = scanner.nextInt();
            System.out.println("Divided by :");
            int y = scanner.nextInt();

            int z = x / y;
            System.out.println("Result : " + z);
        }
        catch(ArithmeticException e) {
            System.out.println("You cannot divide by zero");
        }
        catch(InputMismatchException e) {
            System.out.println("Please enter valid number");
        }
        catch(Exception e) {
            System.out.println("Something went wrong");
        }
        finally {
            //System.out.println("This will always print");
            scanner.close();
        }
    }
}

//file class

import java.io.File;

public class Main {

    public static void main(String[] arg) {

        //file is an abstract representation of file and directory pathname

        File file = new File("secret_message.rtf");
        File file1 = new File("/Users/aniruddhathakare/Downloads/another_file.rtf");

        if(file.exists()) {
            System.out.println("That file exists");
            System.out.println(file.getPath());
            System.out.println(file.getAbsolutePath());
            System.out.println(file.isFile());
            file.delete();
        }
        else {
            System.out.println("That file doesn't exists");
        }

        if(file1.exists()) {
            System.out.println("That file exists");
            System.out.println(file1.getPath());
            System.out.println(file1.getAbsolutePath());
            System.out.println(file1.isFile());
            file1.delete();
        }
        else {
            System.out.println("That file doesn't exists");
        }
    }
}

//fileWriter (write to a file)

import java.io.FileWriter;
import java.io.IOException;

public class Main {

    public static void main(String[] args) {

        try {
            FileWriter writer = new FileWriter("poem.rtf");
            writer.write("Roses are red \nViolets are blue\nJava Java Java \nRocking everywhere");
            writer.append("\n(A poem by Aniruddha)");
            writer.close();
        }
        catch(IOException e) {

            e.printStackTrace();
        }
    }
}

//fileReader (read a file)

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

public class Main {

    public static void main(String[] args) {

        //fileReader = read the contents of a file as a stream of characters
        //one by one read() returns an int value which contains the byte value when read() returns -1 there is no data to read

        try {

            FileReader reader = new FileReader("art.rtf");
            int data = reader.read();
            while(data != -1) {
                System.out.print((char)data);
                data = reader.read();
            }
            reader.close();;
        }
        catch (FileNotFoundException e) {

            e.printStackTrace();
        }
        catch (IOException e) {

            e.printStackTrace();
        }
    }
}

//audio

import javax.sound.sampled.*;
import java.io.File;
import java.io.IOException;
import java.util.Scanner;

public class Main {

    public static void main(String[] args) throws UnsupportedAudioFileException, IOException, LineUnavailableException {

        Scanner scanner = new Scanner(System.in);

        File file = new File("On My Way Home.wav");
        AudioInputStream audioStream = AudioSystem.getAudioInputStream(file);
        Clip clip = AudioSystem.getClip();
        clip.open(audioStream);

        String response = "";

        while(!response.equals("Q")) {
            System.out.println("P = Play, S = Stop, R = Reset, Q = Quit");
            System.out.println("Enter your choice : ");

            response = scanner.next();
            response = response.toUpperCase();

            switch(response) {
                case ("P") : clip.start();
                break;
                case ("S") : clip.stop();
                break;
                case ("R") : clip.setMicrosecondPosition(0);
                break;
                case ("Q") : clip.close();
                break;
                default : System.out.println("Not a valid response");
            }
        }

        System.out.println("Bye...!!!");
    }
}

//generics

public class Main {

    public static void main(String[] args) {

        //generics enable types (classes and interfaces) to be parameters when defining classes, interfaces and methods
        //a benefit is to eliminate the need to create multiple versions of methods are classes for various data types
        //use one version for all reference data types

        Integer[] intArray = {1, 2, 3, 4, 5};
        Double[] doubleArray = {5.5, 4.4, 3.3, 2.2, 1.1};
        Character[] charArray = {'H','E', 'L', 'L', 'O'};
        String[] strArray = {"B", "Y", "E"};

        displayArray(intArray);
        displayArray(doubleArray);
        displayArray(charArray);
        displayArray(strArray);
    }

    public static void displayArray(Integer[] array) {
        for(Integer i : array) {
            System.out.print(i+" ");
        }
        System.out.println();
    }
    public static void displayArray(Double[] array) {
        for(Double i : array) {
            System.out.print(i+" ");
        }
        System.out.println();
    }
    public static void displayArray(Character[] array) {
        for(Character i : array) {
            System.out.print(i+" ");
        }
        System.out.println();
    }
    public static void displayArray(String[] array) {
        for(String i : array) {
            System.out.print(i+" ");
        }
        System.out.println();
    }
}

public class Main {

    public static void main(String[] args) {

        //generics enable types (classes and interfaces) to be parameters when defining classes, interfaces and methods
        //a benefit is to eliminate the need to create multiple versions of methods are classes for various data types
        //use one version for all reference data types

        Integer[] intArray = {1, 2, 3, 4, 5};
        Double[] doubleArray = {5.5, 4.4, 3.3, 2.2, 1.1};
        Character[] charArray = {'H','E', 'L', 'L', 'O'};
        String[] strArray = {"B", "Y", "E"};

        displayArray(intArray);
        displayArray(doubleArray);
        displayArray(charArray);
        displayArray(strArray);

        System.out.println(getFirst(intArray));
        System.out.println(getFirst(doubleArray));
        System.out.println(getFirst(charArray));
        System.out.println(getFirst(strArray));
    }
    public static <Thing> void displayArray(Thing[] array) {
        for(Thing i : array) {
            System.out.print(i+" ");
        }
        System.out.println();
    }
    public static <Thing> Thing getFirst(Thing[] array) {
        return array[0];
    }
}
